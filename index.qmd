---
title: "Trabalho de Regress√£o Linear"
subtitle: "Doen√ßas Cardiovasculares em Honolulu"
lang: pt
author: "Gabriel Lopes Rubinho"
format: 
  revealjs:
    auto-stretch: false
    #logo: "img/des.jpeg"
    width: 1600
    height: 500
    self-contained: false
    incremental: false
    theme: [default, "custom.scss"]
    slide-number: c/t
    show-slide-number: all
    hash-type: number
    preview-links: false
---

<!-- ## Beatriz Milz üáßüá∑ {.center .aboutmeslide} -->

<!-- ::: columns -->

<!-- ::: {.column width="60%"} -->

<!-- -   Contato -->

<!--     -   Twitter: [\@BeaMilz](https://twitter.com/BeaMilz) -->

<!--     -   Blog: [beamilz.com](https://beamilz.com) -->

<!-- -   Sobre mim -->

<!--     -   Co-organizadora: R-Ladies S√£o Paulo / Latin-R / satRday S√£o Paulo -->

<!--     -   Professora na [Curso-R](https://curso-r.com/) -->

<!--     -   Instrutora de Tidyverse certificada pela RStudio -->

<!-- ::: -->

<!-- ::: {.column width="40%"} -->

<!-- ![](images/octocat-1656339210373.png) -->

<!-- ::: -->

<!-- ::: -->

# Introdu√ß√£o


## Modelo de Regress√£o Linear M√∫ltipla {auto-animate="true"}

$y = \beta_0 + \beta_1x_{1} + \beta_2x_{2} + ... + \beta_kx_{k} + \epsilon$

## Modelo de Regress√£o Linear M√∫ltipla {auto-animate="true"}
### teste

$y = \beta_0 + \beta_1x_{1} + \beta_2x_{2} + ... + \beta_kx_{k} + \epsilon$

- k √© o n√∫mero de regressores
-  $\beta_j$ √© a mudan√ßa esperada em $y$ a cada unidade acrescentada em $x_{j}$ quando todas as outras vari√°veis $x_{i} (i \neq j)$ s√£o mantidas fixas.
- $\beta_0$ s√≥ possu√≠ interpreta√ß√£o quando a faixa dos regressores cont√©m 0. 

- $\epsilon \sim \mathcal{N}(0, \sigma^{2})$
- $Var(\epsilon) = E(\epsilon^{2}) = \sigma^{2}$
- $Cov(\epsilon_{i};\epsilon_{i^{'}}) = E(\epsilon_{i}\epsilon_{i^{'}}) = 0$


# Base de Dados

```{r, include= FALSE}
library(tidyverse)
library(pdftools)
library(lubridate)
library(kableExtra)
library(performance)
library(MASS)
library(MASS)
library(car)
library(scatterplot3d)

arquivo <- "trabalho.pdf"

#install.packages('tabulizer')
#remotes::install_github(c("ropensci/tabulizerjars", "ropensci/tabulizer"), INSTALL_opts = "--no-multiarch")

# pag1 <- tabulizer::extract_tables(arquivo, pages = 1)
# pag2 <- tabulizer::extract_tables(arquivo, pages = 2)
# pag3 <- tabulizer::extract_tables(arquivo, pages = 3, method = 'stream')
#                                      
# class(pag3)
# pag3 <- pag3[[1]]
# pag3 <- pag3[1:6,]
# pag3[1:6]
# class(pag3)
# as.tibble(pag3)
# 
# pag3[3,2]
# 
# pag3[,1]

# splita_column <- function(x) {
#   unlist(strsplit(x, " "))
# }
# nova <- cbind(do.call(rbind, lapply(pag3[,1], splita_column)), pag3[,-1])
# novaa <- as.data.frame(nova)
# 
# index_coluna <- which(colnames(novaa) == "V8")
# novaa <- novaa[,-index_coluna]
# 
# pag1 <- as.data.frame(pag1)
# pag2 <- as.data.frame(pag2)
# colnames(novaa) <- c('X1', 'X2', 'X3', 'X4', 'X5', 'X6', 'X7', 'X8', 'X9', 'X10')
# colnames(pag1)
# pag1[2,]
# 
# 
# df_final <- dplyr::bind_rows(pag1, pag2, novaa)
# df_final <- df_final[-c(1,2),]
# df_final <- df_final[-1,]
# 
# colnames(df_final) <- c("id", 'nivel_educacional', 'peso', 'altura', 'idade', 'fuma', 'atividade_fisica_em_casa', 'glicose', 'colesterol', 'pressao_sanguinea_sistolica')
df_final <- read.csv('dataframe.csv', header = TRUE)
df_final_sem7 <- df_final[-c(6, 26, 28, 35, 43, 98, 103),]

df_final$nivel_educacional <- factor(df_final$nivel_educacional)
df_final$peso <- as.numeric(df_final$peso)
df_final$altura <- as.numeric(df_final$altura)
df_final$idade <- as.numeric(df_final$idade)
df_final$fuma <- factor(df_final$fuma)
df_final$atividade_fisica_em_casa <- factor(df_final$atividade_fisica_em_casa)
df_final$glicose <- as.numeric(df_final$glicose)
df_final$colesterol <- as.numeric(df_final$colesterol)
df_final$pressao_sanguinea_sistolica <- as.numeric(df_final$pressao_sanguinea_sistolica)


```

```{r}
knitr::kable(df_final_sem7[1:3,])

```


# Primeiro modelo {auto-animate="true"}

$Press√£o = N√≠vel Educacional + Peso + Altura + Idade + Fuma$
\
$+ Atividade F√≠sica + Glicose + Colesterol$

| FV | GL | SQ | QM | $F_{0}$ |
|---------|:-----|------:|:------:|:------:|
| Regress√£o      |   8 |   8659.801 |   1082.475   |   2.746694   |
| Res√≠duos     | 91  |  35863.2  |   394.1011  |     |
| Total       |   99  |   44523   |       |       |


# Teste de signific√¢ncia da regress√£o

$H_{0}: \beta_1 = \beta_2 = ... = 0$
$H_{\alpha}: \text{Nem todos os } \beta_j \text{ (j = 1, 2, ..., k) s√£o iguais a 0}$  
\
\
Pelo exerc√≠cio anterior, $F_{0} = 2.746694$. Rejeitamos $H_{0}$ se 
$F_{0} > F_{\alpha, k, n-k-1} = F_{0.05, 8, 91} = 2.041812$. Como o valor √© maior que o valor cr√≠tico, rejeitamos a hip√≥tese nula.



# $R^2$ e $R_{Adj}^2$
  
$R^2 = \frac{SQReg}{SQT} = \frac{8659.801}{8659.801} = 0.1945$

# Sum√°rio do modelo

```{r}
#| echo: true
#| eval: true

fitting <- lm(pressao_sanguinea_sistolica ~ nivel_educacional + peso + altura + idade + fuma + atividade_fisica_em_casa + glicose + colesterol, data = df_final)
summary(fitting)
```
# Multiolinearidade {auto-animate="true"}
![](grafico.png){fig-alt="Boxplot" fig-align="center" width=50%}

# Multiolinearidade {auto-animate="true"}

```{r}
vif(fitting)
```

# StepWise {auto-animate="true"}

O algor√≠tmo StepWise retorna o modelo
\
$Press√£o = Idade + Aividade + Glicose + Colesterol$



# StepWise {auto-animate="true"} 


```{r}
#| echo: true
#| eval: true

step <- stepAIC(fitting, direction = 'both')
```

$Press√£o = Idade + Atividade + Glicose + Colesterol$

# An√°lise do StepWise {auto-animate="true"}

```{r}
#| echo: true
#| eval: true

modelo_candidato_final <- lm(pressao_sanguinea_sistolica ~ idade + atividade_fisica_em_casa + glicose + colesterol, data = df_final)
summary(modelo_candidato_final)
```

# Diagn√≥stico de influ√™ncia

Com o modelo escolhido, podemos verificar se h√° poss√≠veis outliers, pontos de alavanca, dist√¢ncias de cook, etc.


```{r}
influencia = influence.measures(modelo_candidato_final)
summary(influencia)

```

Como h√° uma quatidade significativa de dados, esses pontos ser√£o exclu√≠dos.

# Diagn√≥stico de influ√™ncia
```{r}
df_final_sem7 <- df_final[-c(6, 26, 28, 35, 43, 98, 103),]
modelo_candidato_final1 <- lm(pressao_sanguinea_sistolica ~ idade + atividade_fisica_em_casa + glicose + colesterol, data = df_final_sem7)
summary(modelo_candidato_final1)

```





# An√°lise mais profunda StepWise {auto-animate="true"}

Ap√≥s verificar combina√ß√µes de vari√°veis, excluindo e as colocando novamente, um novo modelo foi escolhido: 
\ 
$Press√£o = Idade + Atividade + Glicose$
```{r}

modelo_candidato_final2 <- lm(pressao_sanguinea_sistolica ~ idade + atividade_fisica_em_casa + glicose, data = df_final_sem7)
summary(modelo_candidato_final2)
```

# An√°lise mais profunda StepWise {auto-animate="true"}

Sobre a vari√°vel idade, apesar de n√£o ser significativa, ela nos assegura de que tenhamos o pressuposto da homoscedasticidade v√°lido. 
```{r}
#| echo: true
#| eval: true
check_heteroscedasticity(modelo_candidato_final2)	# modelo com idade
``` 



```{r}
#| echo: false
#| eval: true

modelo_candidato_final3 <- lm(pressao_sanguinea_sistolica ~ atividade_fisica_em_casa + glicose, data = df_final_sem7)

```

```{r}
#| echo: true
#| eval: true
check_heteroscedasticity(modelo_candidato_final3)	# modelo sem idade

```

*Obs*: apesar disso, se rejeita o modelo saturado no teste de anova.

```{r}
#| echo: true
#| eval: true
anova(modelo_candidato_final3, modelo_candidato_final2)


```

::: footer
   
:::

# An√°lise de pressupostos

```{r}
#| echo: false
#| eval: true

modelo_candidato_final2 <- lm(pressao_sanguinea_sistolica ~ idade + factor(atividade_fisica_em_casa) + glicose, data = df_final_sem7)
sumario <- summary(modelo_candidato_final2)
```

```{r}
#| echo: false
#| eval: false

par(mfrow=c(2,2))
plot(modelo_candidato_final2,which=c(1:4),pch=16,add.smooth=FALSE)
```

```{r}

#| echo: true
#| eval: true

check_normality(modelo_candidato_final2)			# Normalidade
check_heteroscedasticity(modelo_candidato_final2)	# Heteroscedasticidade
check_autocorrelation(modelo_candidato_final2)	# Autocorrelacao
check_outliers(modelo_candidato_final2)			# Outliers
check_collinearity(modelo_candidato_final2)		# Colinearidade

```

::: footer
   
:::

# An√°lise de Res√≠duos {auto-animate="true"}
![](fitting.png){fig-alt="Res√≠duos." fig-align="center" width=40%}

# An√°lise de Pressupostos {auto-animate="true"}

```{r}
#| echo: true
#| eval: true

check_normality(modelo_candidato_final2)	
```

# An√°lise de Pressupostos {auto-animate="true"}

```{r}
#| echo: true
#| eval: true

check_normality(modelo_candidato_final2)	
```

```{r}
#| echo: true
#| eval: true

check_heteroscedasticity(modelo_candidato_final2)	# Heteroscedasticidade
```

# An√°lise de Pressupostos {auto-animate="true"}

```{r}
#| echo: true
#| eval: true

check_normality(modelo_candidato_final2)	
```

```{r}
#| echo: true
#| eval: true

check_heteroscedasticity(modelo_candidato_final2)	# Heteroscedasticidade
```

```{r}

#| echo: true
#| eval: true

check_autocorrelation(modelo_candidato_final2)

```


# An√°lise de Pressupostos {auto-animate="true"}

```{r}
#| echo: true
#| eval: true

check_normality(modelo_candidato_final2)	
```

```{r}
#| echo: true
#| eval: true

check_heteroscedasticity(modelo_candidato_final2)	# Heteroscedasticidade
```

```{r}

#| echo: true
#| eval: true

check_autocorrelation(modelo_candidato_final2)

```


```{r}

#| echo: true
#| eval: true

check_outliers(modelo_candidato_final2)

```

# An√°lise de Pressupostos {auto-animate="true"}

```{r}
#| echo: true
#| eval: true

check_normality(modelo_candidato_final2)	
```

```{r}
#| echo: true
#| eval: true

check_heteroscedasticity(modelo_candidato_final2)	# Heteroscedasticidade
```

```{r}

#| echo: true
#| eval: true

check_autocorrelation(modelo_candidato_final2)

```


```{r}

#| echo: true
#| eval: true

check_outliers(modelo_candidato_final2)

```


```{r}

#| echo: true
#| eval: true

check_collinearity(modelo_candidato_final2)
```


# An√°lise de Pressupostos {auto-animate="true"}

```{r}
#| echo: true
#| eval: true

check_normality(modelo_candidato_final2)	
```

```{r}
#| echo: true
#| eval: true

check_heteroscedasticity(modelo_candidato_final2)	# Heteroscedasticidade
```

```{r}

#| echo: true
#| eval: true

check_autocorrelation(modelo_candidato_final2)

```


```{r}

#| echo: true
#| eval: true

check_outliers(modelo_candidato_final2)

```


```{r}

#| echo: true
#| eval: true

check_collinearity(modelo_candidato_final2)
```


```{r}

#| echo: true
#| eval: true

model_performance(modelo_candidato_final2)	
```




# Tentativa de transforma√ß√£o {auto-animate="true"}

Foi-se feita uma tentativa de transforma√ß√£o de dados, pelo m√©todo de Box e Cox, o qual √© determinado por

$Y_{i} = \frac{Y^\lambda -1}{\lambda}$, se $\lambda \neq 0$
\
$Y_{i} = log(Y)$, se $\lambda = 0$

# Tentativa de transforma√ß√£o {auto-animate="true"}

```{r}
#| echo: true
#| eval: true
par(mfrow = c(1, 2))
a = boxcox(pressao_sanguinea_sistolica ~ idade, data=df_final_sem7, plotit=T)
w = boxcox(pressao_sanguinea_sistolica ~ glicose, data=df_final_sem7, plotit=T)
```

# Tentativa de transforma√ß√£o {auto-animate="true"}
Ap√≥s an√°lises, o modelo de combina√ß√£o cujo teve o maior R$^2$ foi o qual o logaritmo √© aplicado nas duas vari√°veis. No entanto, mesmo com a transforma√ß√£o, o pressuposto de normalidade de res√≠duos continua falhando. 


```{r}

#| echo: false
#| eval: true
#| 
df_final_sem7$log_idade <- log(df_final_sem7$idade)
df_final_sem7$log_glicose <- log(df_final_sem7$glicose)

```

```{r}

#| echo: true
#| eval: true
#| 

modelo_final_logIdadeGlicose <- lm(pressao_sanguinea_sistolica ~ log_glicose + log_idade + atividade_fisica_em_casa, data = df_final_sem7)
summary(modelo_final_logIdadeGlicose)

df_final_sem7 <- df_final_sem7[, -c(ncol(df_final_sem7), ncol(df_final_sem7)-1)]


```
# Tentativa de transforma√ß√£o {auto-animate="true"}

```{r}

#| echo: true
#| eval: true

check_normality(modelo_final_logIdadeGlicose)

```


# Efeitos Diretos 

```{r}

df_final_sem7_variaveis <- df_final_sem7[, -c(1:4,6,9)]
df_final_sem7_variaveis <- df_final_sem7_variaveis[, -c(2)]
Dp = apply(df_final_sem7_variaveis, 2, function(x) (x-mean(x))/sd(x) )
Dp = data.frame(Dp)

mod2 <- lm(pressao_sanguinea_sistolica ~ ., data = Dp)

ED = round(coef(mod2),4)[2:4]; ED


```

# Teste de Hip√≥tese - I

$H_{0}: \beta_1 = \beta_2 = \beta_3$
\
$H_{\alpha}: \text{pelo menos um } \beta_j \text{ (j = 1, 2) difere de 0}$


```{r}

summary(modelo_candidato_final2)

```

# Teste de Hip√≥tese - II {auto-animate="true"}


$H_{0}: \beta_j = 0$ 

\ 

$H_{\alpha}: \beta_j \neq 0 (j = 0, 1, 2,...)$

# Teste de Hip√≥tese - II {auto-animate="true"}
Pelo teste t$^{*}$ parcial

```{r}
summary(modelo_candidato_final2)
```

# Teste de Hip√≥tese - II {auto-animate="true"}
Pelo teste F$^{*}$ parcial

```{r}
anova(modelo_candidato_final2)

```

# Correla√ß√µes Parciais

```{r}
library(ppcor)
pcor(df_final_sem7_variaveis)

```
# Correla√ß√µes Simples
```{r}
cor(df_final_sem7_variaveis)
```


# Estimativa para $\sigma^2$

```{r}

sumario
```
$\hat{\sigma}^2 = 19.73$


# Valores estimados

```{r}
df_final <- data.frame(
  y = df_final_sem7$pressao_sanguinea_sistolica,
  y_predict = predict(modelo_candidato_final2)
)

df_final$residuals <- df_final$y - df_final$y_predict

knitr::kable(head(df_final))

soma <- sum(df_final$residuals);soma
shapiro.test(df_final$residuals)
```

::: footer
   
:::

# Gr√°ficos finais {auto-animate="true"}

N√£o se √© poss√≠vel obter um gr√°fico conjunto das 3 vari√°veis. Portanto, ser√° feito um boxplot comparando elas parte por parte.

# Gr√°ficos finais {auto-animate="true"}

![](boxplot_tenta.png){fig-alt="Boxplot" fig-align="center" width=40%}



